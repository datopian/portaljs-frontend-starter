export const runtime = "experimental-edge";
import { GetStaticProps, InferGetStaticPropsType } from "next";
import Head from "next/head";
import getConfig from "next/config";
import DatasetInfo from "@/components/dataset/individualPage/DatasetInfo";
import DatasetOverview from "@/components/dataset/individualPage/DatasetOverview";
import DatasetNavCrumbs from "@/components/dataset/individualPage/NavCrumbs";
import ResourcesList from "@/components/dataset/individualPage/ResourcesList";
import ActivityStream from "@/components/_shared/ActivityStream";
import Layout from "@/components/_shared/Layout";
import Tabs from "@/components/_shared/Tabs";
import TopBar from "@/components/_shared/TopBar";
import { Dataset as DatasetType } from "@portaljs/ckan";
import { CKAN } from "@portaljs/ckan";
import styles from "@/styles/DatasetInfo.module.scss";
import useSWR, { SWRConfig, unstable_serialize } from "swr";

export async function getStaticPaths() {
  const ckan = new CKAN("https://demo.dev.datopian.com");
  const paths = (
    await ckan.getDatasetsListWithDetails({ offset: 0, limit: 1000 })
  ).map((dataset: DatasetType) => ({
    params: { dataset: dataset.name, org: dataset.organization?.name },
  }));
  return {
    paths,
    fallback: "blocking",
  };
}

export const getStaticProps: GetStaticProps = async (context) => {
  const ckan = new CKAN("https://demo.dev.datopian.com");
  try {
    const datasetName = context.params?.dataset;
    if (!datasetName) {
      return {
        notFound: true,
      };
    }
    const dataset = await ckan.getDatasetDetails(datasetName as string);
    if (!dataset) {
      return {
        notFound: true,
      };
    }
    const activityStream = await ckan.getDatasetActivityStream(
      datasetName as string
    );
    const datasetWithActivityStream = {
      ...dataset,
      activity_stream: activityStream,
    };
    return {
      props: {
        dataset: datasetWithActivityStream,
      },
      revalidate: 1800,
    };
  } catch {
    return {
      notFound: true,
    };
  }
};

export default function DatasetPage({
  dataset,
}: InferGetStaticPropsType<typeof getStaticProps>): JSX.Element {
  const tabs = [
    {
      id: "resources",
      content: (
        <ResourcesList
          resources={dataset?.resources}
          orgName={dataset.organization ? dataset.organization.name : ""}
          datasetName={dataset.name}
        />
      ),
      title: "Resources",
    },
    {
      id: "information",
      content: <DatasetOverview dataset={dataset} />,
      title: "Info",
    },
    {
      id: "activity-stream",
      content: (
        <ActivityStream
          activities={dataset?.activity_stream ? dataset.activity_stream : []}
        />
      ),
      title: "Activity Stream",
    },
  ];
  return (
    <>
      <Head>
        <title>{`${dataset.title || dataset.name} - Dataset`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="grid grid-rows-datasetpage-hero">
          <section className="row-start-1 row-end-3 col-span-full">
            <div
              className="bg-cover h-full bg-center bg-no-repeat bg-black flex flex-col"
              style={{
                backgroundImage: "url('/images/backgrounds/SearchHero.avif')",
              }}
            >
              <TopBar />
              <DatasetNavCrumbs
                org={{
                  name: dataset.organization?.name,
                  title: dataset.organization?.title,
                }}
                dataset={{
                  name: dataset.name,
                  title: dataset.title ? dataset.title : "This dataset",
                }}
              />
              <div
                className="grid mx-auto items-center grow custom-container grow"
                style={{ marginBlock: "8rem" }}
              >
                <div className="col-span-1">
                  <h1 className="text-6xl font-black text-white">
                    {dataset.title}
                  </h1>
                </div>
              </div>
            </div>
          </section>
          <section className="grid row-start-2 row-span-2 col-span-full">
            <div className="custom-container">
              {dataset && (
                <main className={styles.main}>
                  <DatasetInfo dataset={dataset} />
                  <div>
                    <Tabs items={tabs} />
                  </div>
                </main>
              )}
            </div>
          </section>
        </div>
      </Layout>
    </>
  );
}
